# Regular HTTP Requests
upstream api {
  server api:8000;
}

# Websocket Requests
upstream websockets {
  server websockets:8001;
}

server {

  client_max_body_size 20M;

  listen 80;

  location /api/v1/ {
    # Forward these requests to the server with the IP address specified 
    # in the api service in the docker compose
    proxy_pass http://api;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host; # Set host header to the original host, to not lose information about the client
    proxy_redirect off;
  }

  location /ws/ {
    # Forward these requests to the server with the IP address specified 
    # in the websockets service in the docker compose, (actual ip resolved internally by docker)
    proxy_pass http://websockets;
    proxy_http_version 1.1; # Ensure we use an http version that allows sockets
    proxy_set_header Upgrade $http_upgrade; # Set "Upgrade" header in the request to the value of the "Upgrade" header received from the client.
    proxy_set_header Host $host; 
    proxy_set_header Connection "upgrade"; # Set "Connection" header in the request to "upgrade", we need it for ws initial handshake and upgrade from http to ws
  }
  location /admin {
    proxy_pass http://api;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_redirect off;
  }
  # manage.py collectstatic moves all static files to /staticfiles/ folder
  location /staticfiles/ {
    # Mapping location in django server within a container (/app/) Remember in django dockerfile
    # we copy everything to /app/ folder
    alias /app/staticfiles/;
  }
  # 'Alias' maps the request url to my folders in the server/project to return actual files
  # Note that the behavior is different than in the first location block 

  location /mediafiles/ {
    alias /app/mediafiles/;
  }
}
